<!-- ##### SECTION Title ##### -->
soup-uri

<!-- ##### SECTION Short_Description ##### -->
URIs

<!-- ##### SECTION Long_Description ##### -->
<para>
A #SoupUri represents a (parsed) URI. On the client side, you
may not need to use #SoupUri at all (since soup_message_new() takes a
stringified URI). On the server side, you will generally need to look
at the uri field of an incoming message to determine how to process it.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### STRUCT SoupURI ##### -->
<para>

</para>

@scheme: 
@user: 
@password: 
@host: 
@port: 
@path: 
@query: 
@fragment: 

<!-- ##### FUNCTION soup_uri_new_with_base ##### -->
<para>

</para>

@base: 
@uri_string: 
@Returns: 


<!-- ##### FUNCTION soup_uri_new ##### -->
<para>

</para>

@uri_string: 
@Returns: 


<!-- ##### FUNCTION soup_uri_to_string ##### -->
<para>

</para>

@uri: 
@just_path: 
@Returns: 


<!-- ##### FUNCTION soup_uri_copy ##### -->
<para>

</para>

@uri: 
@Returns: 


<!-- ##### FUNCTION soup_uri_equal ##### -->
<para>

</para>

@uri1: 
@uri2: 
@Returns: 


<!-- ##### FUNCTION soup_uri_free ##### -->
<para>

</para>

@uri: 


<!-- ##### FUNCTION soup_uri_encode ##### -->
<para>

</para>

@part: 
@escape_extra: 
@Returns: 


<!-- ##### FUNCTION soup_uri_decode ##### -->
<para>

</para>

@part: 
@Returns: 


<!-- ##### FUNCTION soup_uri_normalize ##### -->
<para>

</para>

@part: 
@unescape_extra: 
@Returns: 


<!-- ##### FUNCTION soup_uri_uses_default_port ##### -->
<para>

</para>

@uri: 
@Returns: 


<!-- ##### FUNCTION soup_uri_is_https ##### -->
<para>

</para>

@uri: 
@Returns: 


