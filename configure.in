# Process this file with autoconf to produce a configure script.

# Require autoconf 2.12
AC_PREREQ(2.12)

# Initialize autoconf
AC_INIT(configure.in)

AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)
SOUP_MAJOR_VERSION=0
SOUP_MINOR_VERSION=1
SOUP_MICRO_VERSION=9
SOUP_INTERFACE_AGE=0
SOUP_BINARY_AGE=0
SOUP_VERSION=$SOUP_MAJOR_VERSION.$SOUP_MINOR_VERSION.$SOUP_MICRO_VERSION
AC_SUBST(SOUP_MAJOR_VERSION)
AC_SUBST(SOUP_MINOR_VERSION)
AC_SUBST(SOUP_MICRO_VERSION)
AC_SUBST(SOUP_VERSION)
AC_DIVERT_POP()

LT_RELEASE=$SOUP_VERSION
LT_CURRENT=$SOUP_MINOR_VERSION
LT_REVISION=$SOUP_MICRO_VERSION
LT_AGE=$SOUP_MINOR_VERSION
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

VERSION=$SOUP_VERSION
PACKAGE=soup

# Specify a configuration file
AM_CONFIG_HEADER(config.h)

# Initialize automake
AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)

# Initialize maintainer mode
AM_MAINTAINER_MODE


# ****************************************
# Set debugging flags

# Figure out debugging default, prior to $ac_help setup
AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)dnl
if test `expr $SOUP_MINOR_VERSION \% 2` = 1 ; then
	debug_default=yes
else
	debug_default=minimum
fi
AC_DIVERT_POP()

# Declare --enable-* args and collect ac_help strings
AC_ARG_ENABLE(debug, [  --enable-debug=[no/minimum/yes] turn on debugging [default=$debug_default]],,enable_debug=$debug_default)

# Set the debug flags
AC_MSG_CHECKING(for --enable-debug)
if test "x$enable_debug" = "xyes"; then
  test "$cflags_set" = set || CFLAGS="$CFLAGS -g"
  SOUP_DEBUG_FLAGS="-DG_ENABLE_DEBUG"
  AC_MSG_RESULT(yes)
else
  if test "x$enable_debug" = "xno"; then
    SOUP_DEBUG_FLAGS="-DG_DISABLE_ASSERT -DG_DISABLE_CHECKS"
    AC_MSG_RESULT(no)
  fi
fi

AC_SUBST(SOUP_DEBUG_FLAGS)


# ****************************************
# Check for programs

AC_PROG_CC
AM_PROG_CC_STDC
AC_PROG_INSTALL

# Use an many warnings as possible
changequote(,)
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac

  if test "x$enable_ansi" = "xyes"; then
    case " $CFLAGS " in
    *[\ \	]-ansi[\ \	]*) ;;
    *) CFLAGS="$CFLAGS -ansi" ;;
    esac

    case " $CFLAGS " in
    *[\ \	]-pedantic[\ \	]*) ;;
    *) CFLAGS="$CFLAGS -pedantic" ;;
    esac
  fi
fi
changequote([,])

# Use reentrant functions
CFLAGS="$CFLAGS -D_REENTRANT"

# Set STDC_HEADERS
AC_HEADER_STDC

# Initialize libtool
AM_PROG_LIBTOOL


# ****************************************
# Check for libraries

# Need GLIB
AM_PATH_GLIB(1.2.0,,
             AC_MSG_ERROR([Cannot find GLIB: Is glib-config in path?]),
             gmodule)

GLIB_CFLAGS=`glib-config --cflags glib gmodule`
GLIB_LIBS=`glib-config --libs glib gmodule`

AC_SUBST(GLIB_CFLAGS)
AC_SUBST(GLIB_LIBS)


# Need GNET
AM_PATH_GNET(1.0.4,,
             AC_MSG_ERROR([Cannot find GNET: Is gnet-config in path?]))

GNET_CFLAGS=`gnet-config --cflags gnet`
GNET_LIBS=`gnet-config --libs gnet`

AC_SUBST(GNET_CFLAGS)
AC_SUBST(GNET_LIBS)


# Need gnome-xml 1
AC_PATH_PROG(XML_CONFIG,xml-config,no)
if test x$XML_CONFIG = xno; then
	AC_MSG_ERROR([Cannot find LIBXML: Is xml-config in path?])
fi
XML_CFLAGS=`xml-config --cflags`
XML_LIBS=`xml-config --libs`

AC_SUBST(XML_CFLAGS)
AC_SUBST(XML_LIBS)


# Need popt
save_CPPFLAGS=$CPPFLAGS
save_LIBS=$LIBS
CPPFLAGS=
LIBS=

AC_CHECK_LIB(popt, poptGetContext,, AC_MSG_ERROR([popt is required]))
AC_CHECK_HEADERS(popt.h,, AC_MSG_ERROR([popt.h is required]))

POPT_CFLAGS=$CPPFLAGS
POPT_LIBS=$LIBS

AC_SUBST(POPT_CFLAGS)
AC_SUBST(POPT_LIBS)

CPPFLAGS=$save_CPPFLAGS
LIBS=$save_LIBS


# Need in.h and tcp.h for setting of TCP_NODELAY
AC_CHECK_HEADERS(netinet/in.h netinet/tcp.h)


# Check for OpenSSL
AC_ARG_ENABLE(ssl, 
[  --enable-ssl             turn on Secure Sockets Layer support [default=yes]
                           ([=no] will override --with-ssl)],,enable_ssl=yes)

AC_ARG_WITH(nspr-includes,
[  --with-nspr-includes     Specify location of Netscape Portable Runtime headers],[
nspr_inc_prefix=-I$withval
])

AC_ARG_WITH(nspr-libs,
[  --with-nspr-libs         Specify location of Netscape Portable Runtime libs],[
nspr_prefix=-L$withval
])

AC_ARG_WITH(nss-includes,
[  --with-nss-includes      Specify location of NSS header files],[
nss_inc_prefix=-I$withval
])

AC_ARG_WITH(nss-libs,
[  --with-nss-libs          Specify location of NSS libs],[
nss_prefix=-L$withval
])


AC_ARG_WITH(openssl-includes,
[  --with-openssl-includes  Specify location of OpenSSL header files],[
openssl_inc_prefix=-I$withval
])

AC_ARG_WITH(openssl-libs,
[  --with-openssl-libs      Specify location of OpenSSL libs],[
openssl_prefix=-L$withval
])

if test "x$enable_ssl" = xyes; then
	save_CPPFLAGS=$CPPFLAGS
	CPPFLAGS="$openssl_inc_prefix"
	AC_CHECK_HEADERS(openssl/ssl.h)
	AC_CHECK_HEADERS(openssl/err.h)
	OPENSSL_CFLAGS=$CPPFLAGS
	OPENSSL_LIBS="$openssl_prefix"
	AC_SUBST(OPENSSL_CFLAGS)
	AC_SUBST(OPENSSL_LIBS)
	CPPFLAGS=$save_CPPFLAGS

	save_CPPFLAGS=$CPPFLAGS
	CPPFLAGS="$nspr_inc_prefix $nss_inc_prefix"
	AC_CHECK_HEADERS(prthread.h)
	AC_CHECK_HEADERS(security/ssl.h)
	AC_CHECK_HEADERS(security/pk11func.h)
	NSS_CFLAGS=$CPPFLAGS
	NSS_LIBS="$nspr_prefix $nss_prefix"
	AC_SUBST(NSS_CFLAGS)
	AC_SUBST(NSS_LIBS)
	CPPFLAGS=$save_CPPFLAGS
fi

# Set PACKAGE_SOURCE_DIR in config.h.
packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}")

# If gcc is the compiler, compile with lots of warnings
if test "x$GCC" = "xyes"; then
	CFLAGS="$CFLAGS -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations "
	WSDL_CFLAGS="-Werror"
fi

AC_SUBST(WSDL_CFLAGS)

#	doc/Makefile

AC_OUTPUT([
	soup-config
	soup.pc
	soup.spec
	soupConf.sh
	Makefile
	src/Makefile
	src/soup-core/Makefile
	src/soup-wsdl/Makefile
	tests/Makefile
	],
	[chmod +x soup-config])
