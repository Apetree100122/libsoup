# Process this file with autoconf to produce a configure script.

# Require autoconf 2.12
AC_PREREQ(2.12)

# Initialize autoconf
AC_INIT(configure.in)

AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)
SOUP_MAJOR_VERSION=0
SOUP_MINOR_VERSION=1
SOUP_MICRO_VERSION=9
SOUP_INTERFACE_AGE=0
SOUP_BINARY_AGE=0
SOUP_VERSION=$SOUP_MAJOR_VERSION.$SOUP_MINOR_VERSION.$SOUP_MICRO_VERSION
VERSION=$SOUP_VERSION
PACKAGE=soup
AC_DIVERT_POP()

LT_RELEASE=$SOUP_VERSION
LT_CURRENT=$SOUP_INTERFACE_AGE
LT_REVISION=$SOUP_BINARY_AGE
LT_AGE=`expr $SOUP_BINARY_AGE - $SOUP_INTERFACE_AGE`

AC_SUBST(SOUP_MAJOR_VERSION)
AC_SUBST(SOUP_MINOR_VERSION)
AC_SUBST(SOUP_MICRO_VERSION)
AC_SUBST(SOUP_VERSION)
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

# Specify a configuration file
AM_CONFIG_HEADER(config.h)

# Initialize automake
AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)

# Initialize maintainer mode
AM_MAINTAINER_MODE


# ****************************************
# Set debugging flags

# Figure out debugging default, prior to $ac_help setup
AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)dnl
if test `expr $SOUP_MINOR_VERSION \% 2` = 1 ; then
	debug_default=yes
else
	debug_default=minimum
fi
AC_DIVERT_POP()

# Declare --enable-* args and collect ac_help strings
AC_ARG_ENABLE(debug, [  --enable-debug=[no/minimum/yes] turn on debugging [default=$debug_default]],,enable_debug=$debug_default)

# Set the debug flags
AC_MSG_CHECKING(for --enable-debug)
if test "x$enable_debug" = "xyes"; then
  test "$cflags_set" = set || CFLAGS="$CFLAGS -g"
  SOUP_DEBUG_FLAGS="-DG_ENABLE_DEBUG"
  AC_MSG_RESULT(yes)
else
  if test "x$enable_debug" = "xno"; then
    SOUP_DEBUG_FLAGS="-DG_DISABLE_ASSERT -DG_DISABLE_CHECKS"
    AC_MSG_RESULT(no)
  fi
fi

AC_SUBST(SOUP_DEBUG_FLAGS)


# ****************************************
# Check for programs

AC_PROG_CC
AM_PROG_CC_STDC
AC_PROG_INSTALL

# Use an many warnings as possible
changequote(,)
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac

  if test "x$enable_ansi" = "xyes"; then
    case " $CFLAGS " in
    *[\ \	]-ansi[\ \	]*) ;;
    *) CFLAGS="$CFLAGS -ansi" ;;
    esac

    case " $CFLAGS " in
    *[\ \	]-pedantic[\ \	]*) ;;
    *) CFLAGS="$CFLAGS -pedantic" ;;
    esac
  fi
fi
changequote([,])

# Use reentrant functions
CFLAGS="$CFLAGS -D_REENTRANT"

# Set STDC_HEADERS
AC_HEADER_STDC

# Initialize libtool
AM_PROG_LIBTOOL


# ****************************************
# Check for libraries

# Need GLIB
AM_PATH_GLIB(1.2.0,
            [LIBS="$LIBS $GLIB_LIBS" CFLAGS="$CFLAGS $GLIB_CFLAGS"],
            AC_MSG_ERROR(Cannot find GLIB: Is glib-config in path?))

GLIB_CFLAGS=`glib-config --cflags glib`
GLIB_LIBS=`glib-config --libs glib`

AC_SUBST(GLIB_CFLAGS)
AC_SUBST(GLIB_LIBS)


# Need GNET
AM_PATH_GNET(1.0.0,
	     [LIBS="$LIBS $GNET_LIBS" CFLAGS="$CFLAGS $GNET_CFLAGS"],
             AC_MSG_ERROR(Cannot find GNET: Is gnet-config in path?))

GNET_CFLAGS=`gnet-config --cflags gnet`
GNET_LIBS=`gnet-config --libs gnet`

AC_SUBST(GNET_CFLAGS)
AC_SUBST(GNET_LIBS)


# Need gnome-xml 1
AC_PATH_PROG(XML_CONFIG,xml-config,no)
if test x$XML_CONFIG = xno; then
	AC_MSG_ERROR(Cannot find xml-config)
fi
XML_LIBS=`xml-config --libs`
XML_CFLAGS=`xml-config --cflags`

LIBS="$LIBS $XML_LIBS"
CFLAGS="$CFLAGS $XML_CFLAGS"

AC_SUBST(XML_LIBS)
AC_SUBST(XML_CFLAGS)


# Need popt
AC_CHECK_LIB(popt, poptGetContext,, AC_MSG_ERROR([popt is required]))


# Need in.h and tcp.h for setting of TCP_NODELAY
AC_CHECK_HEADERS(netinet/in.h netinet/tcp.h)


# Check for OpenSSL
AC_ARG_ENABLE(ssl, 
[  --enable-ssl             turn on Secure Sockets Layer support [default=yes]
                           ([=no] will override --with-ssl)],,enable_ssl=yes)

AC_ARG_WITH(ssl, 
	[  --with-ssl=[nss/openssl/none] Specify an SSL implementation to use],
        if test "x$with_ssl" = x; then
                want_ssl=yes
        else
                want_ssl=$with_ssl
        fi,
        want_ssl=yes)
if test "x$enable_ssl" = "xno"; then
        want_ssl=no
fi
if test "x$want_ssl" = "xnone"; then
        want_ssl=no
fi

if test "x$want_ssl" = xyes || test "x$want_ssl" = xopenssl; then
	AC_CHECK_HEADERS(openssl/ssl.h)
	AC_CHECK_HEADERS(openssl/err.h)
	AC_CHECK_LIB(crypto, X509_free, , )
	AC_CHECK_LIB(ssl, SSL_CTX_new, , , -lcrypto)
fi

AC_ARG_WITH(nss, [  --with-nss-prefix=PFX    Prefix of NSS installation (optional)])

if test "x$want_ssl" = xnss; then
	AC_CHECK_HEADERS(ssl/ssl.h)
fi

if test x$with_nss != x; then 
	AC_MSG_CHECKING(for Nss)
	if test -f "$with_nss/include/ssl/ssl.h"; then
 		AC_MSG_RESULT(found)
		LIBS="$LIBS -L$with_nss/lib -lssl"
		CFLAGS="$CFLAGS -I$with_nss/include"
		AC_DEFINE(HAVE_NSS)
	else
	    	AC_MSG_RESULT(not found)
		echo
	fi
fi

# Set PACKAGE_SOURCE_DIR in config.h.
packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}")

# If gcc is the compiler, compile with lots of warnings
if test "x$GCC" = "xyes"; then
	CFLAGS="$CFLAGS -Wall -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations "
fi

#	doc/Makefile

AC_OUTPUT([
	soup-config
	soup.pc
	soup.spec
	soupConf.sh
	Makefile
	src/Makefile
	src/soup-core/Makefile
	src/soup-wsdl/Makefile
	tests/Makefile
	],
	[chmod +x soup-config])
